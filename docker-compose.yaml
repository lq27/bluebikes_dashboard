services:
  postgres:
    image: postgres
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: kestra
      POSTGRES_USER: kestra
      POSTGRES_PASSWORD: k3str4
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 10
    ports:
      - "5432:5432"

  kestra:
      image: kestra/kestra:latest
      pull_policy: always
      # Note that this setup with a root user is intended for development purpose.
      # Our base image runs without root, but the Docker Compose implementation needs root to access the Docker socket
      # To run Kestra in a rootless mode in production, see: https://kestra.io/docs/installation/podman-compose
      user: "root"
      command: server standalone
      volumes:
        - /home/abbythecat27/bluebikes_dashboard/kestra-data/workflows:/app/workflows  # modified from template yaml for a locally mapped directory
        - /home/abbythecat27/bluebikes_dashboard/kestra-storage:/app/storage
        - /home/abbythecat27/bluebikes_dashboard/kestra-secrets:/app/secrets
        - /var/run/docker.sock:/var/run/docker.sock
        - /tmp/kestra-wd:/tmp/kestra-wd
      environment:  # changed kestra url to 8090 since i want 8080 for pgadmin. 
        KESTRA_CONFIGURATION: |
          datasources:
            postgres:
              url: jdbc:postgresql://postgres:5432/kestra
              driverClassName: org.postgresql.Driver
              username: kestra
              password: k3str4
          kestra:   
            server:
              basicAuth:
                enabled: false
                username: "admin@kestra.io" # it must be a valid email address
                password: kestra
            repository:
              type: postgres
              directories:
                - /app/workflows
            storage:
              type: local
              local:
                basePath: "/app/storage"
            queue:
              type: postgres
            tasks:
              tmpDir:
                path: /tmp/kestra-wd/tmp
            plugins:            
              configurations:              
              - type: io.kestra.plugin.scripts.runner.docker.Docker                
                values:                  
                  volume-enabled: true
            url: http://localhost:8090/ 
      ports:
        - "8090:8080"
        - "8081:8081"
      depends_on:
        postgres:
          condition: service_started

  # kestra:
  #   image: kestra/kestra:latest
  #   pull_policy: always
  #   # Note that this setup with a root user is intended for development purpose.
  #   # Our base image runs without root, but the Docker Compose implementation needs root to access the Docker socket
  #   # To run Kestra in a rootless mode in production, see: https://kestra.io/docs/installation/podman-compose
  #   user: "root"
  #   command: server standalone
  #   volumes:
  #     - ./kestra-data:/app/storage  # modified from template yaml for a locally mapped directory
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /tmp/kestra-wd:/tmp/kestra-wd
  #   environment: 
  #     KESTRA_CONFIGURATION: |
  #       datasources:
  #         postgres:
  #           url: jdbc:postgresql://postgres:5432/kestra
  #           driverClassName: org.postgresql.Driver
  #           username: kestra
  #           password: k3str4
  #       kestra:   
  #         server:
  #           basicAuth:
  #             enabled: false
  #             username: "admin@kestra.io" # it must be a valid email address
  #             password: kestra
  #         repository:
  #           type: postgres
  #         storage:
  #           type: local
  #           local:
  #             basePath: "/app/storage"
  #         source-repository:
  #           fs:
  #             base-path: "/app/storage/workflows"
  #         queue:
  #           type: postgres
  #         tasks:
  #           tmpDir:
  #             path: /tmp/kestra-wd/tmp
  #         url: http://localhost:8080/
  #   ports:
  #     - "8080:8080"
  #     - "8081:8081"
  #   env_file:
  #     - .env_encoded
  #   depends_on:
  #     postgres:
  #       condition: service_started

